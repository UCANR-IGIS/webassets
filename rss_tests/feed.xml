<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>R &#8211; Andy Lyons</title>
	<atom:link href="https://andylyons.org/tag/r/feed" rel="self" type="application/rss+xml" />
	<link>https://andylyons.org</link>
	<description>Your story, beautifully told - Created with WordPress managed by 1&#038;1</description>
	<lastBuildDate>Thu, 03 Jun 2021 04:30:45 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<item>
		<title>Create a 360 Photo Viewer with Shiny and Pannellum</title>
		<link>https://andylyons.org/shiny-360-photo-viewer</link>
					<comments>https://andylyons.org/shiny-360-photo-viewer#respond</comments>
		
		<dc:creator><![CDATA[andy_admin]]></dc:creator>
		<pubDate>Wed, 02 Jun 2021 03:09:37 +0000</pubDate>
				<category><![CDATA[R]]></category>
		<category><![CDATA[360s]]></category>
		<category><![CDATA[Pannellum]]></category>
		<category><![CDATA[Shiny]]></category>
		<guid isPermaLink="false">https://andylyons.org/?p=48</guid>

					<description><![CDATA[<p>Introduction 360 photos are lot of fun to use, and easy to make thanks to phone apps and affordable 360 cameras. Viewing them however requires special software. The images themselves are typically saved as JPGs with a 2:1 aspect ratio. &#8230;</p>
<p class="read-more"> <a class="more-link" href="https://andylyons.org/shiny-360-photo-viewer"> <span class="screen-reader-text">Create a 360 Photo Viewer with Shiny and Pannellum</span> Read More &#187;</a></p>
<p>The post <a rel="nofollow" href="https://andylyons.org/shiny-360-photo-viewer">Create a 360 Photo Viewer with Shiny and Pannellum</a> appeared first on <a rel="nofollow" href="https://andylyons.org">Andy Lyons</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h2>Introduction</h2>
<p>360 photos are lot of fun to use, and easy to make thanks to phone apps and affordable 360 cameras. Viewing them however requires special software. The images themselves are typically saved as JPGs with a 2:1 aspect ratio. They look distorted when viewed with a standard image viewer, but become interactive when rendered by 360 viewers.</p>
<p><img loading="lazy" class="alignnone size-full wp-image-49" src="https://andylyons.org/wp-content/uploads/2021/06/sample360_600x300.jpg" alt="Sample 360 image showing distortion at the top and bottom" width="600" height="300" srcset="https://andylyons.org/wp-content/uploads/2021/06/sample360_600x300.jpg 600w, https://andylyons.org/wp-content/uploads/2021/06/sample360_600x300-300x150.jpg 300w, https://andylyons.org/wp-content/uploads/2021/06/sample360_600x300-100x50.jpg 100w, https://andylyons.org/wp-content/uploads/2021/06/sample360_600x300-150x75.jpg 150w, https://andylyons.org/wp-content/uploads/2021/06/sample360_600x300-200x100.jpg 200w, https://andylyons.org/wp-content/uploads/2021/06/sample360_600x300-450x225.jpg 450w" sizes="(max-width: 600px) 100vw, 600px" /><br /><em>360 photos are typically stored as regular JPGs. Special viewers are required to make them interactive.</em></p>
<h2>A 360 Shiny Viewer</h2>
<p>Most 360 camera manufacturers bundle apps you can use to view your 360s on mobile devices. Social media platforms like FaceBook can also render them interactively, and that’s how a lot of people share them. However these options can be limited and are klunky to use when you have dozens of 360 images, or want to do something a little out-of-the-box like overlay titles or set a default viewing angle.</p>
<p>This is where Shiny comes to the rescue. This post will show you how to create a simple Shiny app to view 360 images. You can run the app from RStudio on your laptop, or publish it on a Shiny server in the cloud (like <a href="https://shinyapps.io/" target="_blank" rel="noopener">ShinyApps.io</a>). For best performance, the images themselves should be saved in the same place as the app (i.e., on your computer or the cloud).</p>
<h2>Pannellum</h2>
<p>In this example, Shiny is really only being used as glorified HTML server. The real star of the show is <a href="https://pannellum.org/" target="_blank" rel="noopener"><strong>Pannellum</strong></a>. Pannellum is an awesome JavaScript library by <a href="https://mpetroff.net/" target="_blank" rel="noopener">Matthew Petroff</a> that renders 360 images in a browser. It’s extremely easy to use out of the box, and has an impressive array of customizations for those who need enhanced functionality. For example you can overlay a title on the image, have it auto-rotate, control the field of view and zoom levels, etc. Even add clickable hotspots!</p>
<p>Below we’ll first work through a basic case of using Shiny and Pannellum to view a folder of 360 jpgs. After that we’ll construct a more advanced Shiny app that takes advantages of some of Pannellum’s more advanced options. To see the final product, you can jump to the <a href="https://ucanr-igis.shinyapps.io/ucb_botanical_garden/" target="_blank" rel="noopener">Basic 360 Photo Viewer</a> (featuring images from the UC Berkeley Botanical Garden), or the intermediate <a href="https://ucanr-igis.shinyapps.io/aerial360s/" target="_blank" rel="noopener">Drone 360 Viewer</a> (aerial 360 photos taken over UC field stations). You can also <a href="https://github.com/ucanr-igis/360viewer" target="_blank" rel="noopener">download</a> the source code and sample images for both apps.</p>
<p>This tutorial presume you already know the basics of Shiny (at least enough to follow the code). If not, check out some of the great <a href="https://shiny.rstudio.com/tutorial/" target="_blank" rel="noopener">getting started with Shiny</a> tutorials from RStudio.</p>
<h2>Part I. Basic Viewer</h2>
<h3>Set up the directory and support files</h3>
<p>To create the basic viewer, first create a directory for your app. In this example we&#8217;ll call it <code>my360s</code>. Within that folder make an empty folder called <tt>www</tt>. This is where we&#8217;ll put the images and other assets needed for the viewer. Your directory structure should look like:</p>
<pre>/.../my360s
       └──www/
</pre>
<p>Next download the <a href="https://pannellum.org/download/" target="_blank" rel="noopener">Pannellum files</a>. From the zip file you download, copy the following three files to the <tt>www</tt> folder:</p>
<pre>/.../my360s
       └──www/
            ├──pannellum.htm
            ├──pannellum.js
            └──pannellum.css
</pre>
<p>Next, throw some 360 jpgs into <tt>www</tt>. If you don’t have any of your own, you can use <a href="https://drive.google.com/file/d/1r4_EmWCT1xkq5MRUa2m-1GWTeQ2H4IMR/view?usp=sharing" target="_blank" rel="noopener">these</a>.</p>
<pre>/.../my360s
       └──www/
            ├──pannellum.htm
            ├──pannellum.js
            ├──pannellum.css
            ├──R0010096.JPG
            ├──R0010099.JPG
            ├──R0010105.JPG
            └──R0010108.JPG
</pre>
<h2>Create app.R</h2>
<p>Now we’re ready to create the code for the Shiny app. In RStudio, select File &gt;&gt; New File &gt;&gt; Shiny Web App. Create a single-file web app (app.R) and put it <strong>parent directory</strong> of <tt>www</tt>:</p>
<pre>/.../my360s
       ├──app.R
       └──www/
            ├──pannellum.htm
            ├──pannellum.js
            ├──pannellum.css
            ├──R0010096.JPG
            ├──R0010099.JPG
            ├──R0010105.JPG
            └──R0010108.JPG
</pre>
<p>We’ll build out app.R in two steps. In the first pass, we will:</p>
<ol style="list-style-type: decimal;">
<li>Create a vector of the JPG filenames</li>
<li>Set up the UI with a) a select input (drop down box) for the JPG files, and b) a <code>uiOutput</code> object which will become our iFrame.</li>
</ol>
<p>Here’s the code for the first version of app.R. You should be able to copy-paste it into RStudio. After you paste it, save it then click the ‘Run app’ button to make sure it works.</p>
<pre style="background-color: #f5f5f5; border: 1px solid #ccc; padding: 3px;">library(shiny)

## Create a vector of the JPG files in the 'www' directory.
## We do this *outside* of ui() and server() because this only needs to be done once and only once
imgs_fn &lt;- list.files("www", pattern = "JPG$|JPEG$", ignore.case = TRUE)

## Define the UI
ui &lt;- fluidPage(
  titlePanel("Simple 360 Photo Viewer"),
  
  sidebarLayout(
    sidebarPanel(
      selectInput("img_fn", "Image", choices = imgs_fn, selected = NULL),
      width = 2
    ),
    mainPanel(
      uiOutput("pano_iframe")
    )
  )
)

server &lt;- function(input, output) {

}

# Run the application 
shinyApp(ui = ui, server = server)
</pre>
<p>At this point, if everything is working when you click the ‘Run App’ button a RStudio viewer or web browser should open and you will see this:</p>
<p><img loading="lazy" class="alignnone size-full wp-image-53" src="https://andylyons.org/wp-content/uploads/2021/06/basic_app_step1_300x224x256.png" alt="Drop down box showing images" width="300" height="224" srcset="https://andylyons.org/wp-content/uploads/2021/06/basic_app_step1_300x224x256.png 300w, https://andylyons.org/wp-content/uploads/2021/06/basic_app_step1_300x224x256-100x75.png 100w, https://andylyons.org/wp-content/uploads/2021/06/basic_app_step1_300x224x256-150x112.png 150w, https://andylyons.org/wp-content/uploads/2021/06/basic_app_step1_300x224x256-200x149.png 200w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<p>Next, we’ll build the <code>server()</code> function. Replace the blank <code>server()</code> function above with the code below. When all is said-and-done your app.R should look like <a href="https://gist.github.com/ajlyons/58233833b4b5ccde08fd47810802f6f5" target="_blank" rel="noopener">this</a>.</p>
<p>The server function updates controls in the user interface. In our case, there’s only one form control we need to update dynamically &#8211; the iframe. We do this with a <code>renderUI()</code> function that returns a HTML tag for an iFrame.</p>
<pre style="background-color: #f5f5f5; border: 1px solid #ccc; padding: 3px;">server &lt;- function(input, output) {

  output$pano_iframe &lt;- renderUI({

    ## Construct the iframe URL
    src_url &lt;- paste0("pannellum.htm#panorama=",
                                input$img_fn, 
                                "&amp;autoLoad=true&amp;autoRotate=-2")
    
    tags$iframe(src = URLencode(src_url), width = "1200px", height = "600px")
  })
}
</pre>
<p>The key attribute of the iframe is source URL. Here is an example of a Pannellum URL:</p>
<pre><code>pannellum.htm#panorama=R0010096.JPG&amp;autoLoad=true&amp;autoRotate=-2</code></pre>
<p>Essentially, the URL is <code>pannellum.htm</code>, plus some parameters that specify which JPG image to display, and options like whether or not to autoLoad the image, and how fast to autoRotate (in degrees per second). For more details and to see what other parameters you can add, read the <a href="https://pannellum.org/documentation/overview/" target="_blank" rel="noopener">Pannellum documentation</a>. We’ll see examples of some additional parameters in Part II below.</p>
<p>You may be wondering why the iframe URL doesn’t include the <tt>www</tt> subdirectory? With Shiny, once the web app is running the <tt>www</tt> folder acts as the base or root. Hence the URL which populates the iframe doesn’t require a path for either pannellum.htm or the images. If the images were in a subdirectory of <tt>www</tt>, we would certainly need to include that in the URL.</p>
<p>Click Run App again and if everything is good you should have a fully functioning basic 360 viewer. To view more images, all you need to do is move them into <tt>www</tt>. You can also copy directories of images into <tt>www</tt> and add <code>recursive = TRUE</code> to <code>list.files()</code> that creates <code>imgs_fn</code>.</p>
<h2>Part II. Drone 360 Photo Viewer</h2>
<p>In the next example we’ll create a more advanced 360 viewer, taking advantage of additional parameters you can pass the Pannellum URL. Specifically, we’ll overlay the title, name of the author, and pitch (i.e., downward camera angle). The later will be useful because this example uses 360 images taken from drones. Click on the screenshot below to view the final product.</p>
<p><a href="https://ucanr-igis.shinyapps.io/aerial360s/" target="_blank" rel="noopener"><img loading="lazy" class="alignnone size-full wp-image-78" style="border: 1px solid gray;" src="https://andylyons.org/wp-content/uploads/2021/06/drone360_viewer-800x400_q20.jpg" alt="Drone 360 Viewer Shiny App" width="800" height="400" srcset="https://andylyons.org/wp-content/uploads/2021/06/drone360_viewer-800x400_q20.jpg 800w, https://andylyons.org/wp-content/uploads/2021/06/drone360_viewer-800x400_q20-300x150.jpg 300w, https://andylyons.org/wp-content/uploads/2021/06/drone360_viewer-800x400_q20-768x384.jpg 768w, https://andylyons.org/wp-content/uploads/2021/06/drone360_viewer-800x400_q20-100x50.jpg 100w, https://andylyons.org/wp-content/uploads/2021/06/drone360_viewer-800x400_q20-150x75.jpg 150w, https://andylyons.org/wp-content/uploads/2021/06/drone360_viewer-800x400_q20-200x100.jpg 200w, https://andylyons.org/wp-content/uploads/2021/06/drone360_viewer-800x400_q20-450x225.jpg 450w, https://andylyons.org/wp-content/uploads/2021/06/drone360_viewer-800x400_q20-600x300.jpg 600w" sizes="(max-width: 800px) 100vw, 800px" /></a></p>
<p>To run the Drone 360 Viewer on your own machine, download the <a href="https://github.com/ucanr-igis/360viewer" target="_blank" rel="noopener">repo</a>, unzip it, and open <code>aerial360s/app.R</code> in RStudio. The directory structure for this app is very similar to the basic viewer in Part I, with a couple of additions:</p>
<ul>
<li>
<p><code>images.csv</code>. Instead of reading the JPGs with <code>list.files()</code>, we have them listed in a csv file along with the name of the author, a short title for the select input, and a long title to overlay.</p>
</li>
<li>
<p>The <tt>www</tt> folder has several 360 JPGs (like Part I). However in addition, one of our 360s has been converted to ‘<strong>tiles</strong>’ that live in their own sudirectory (<code>elkus</code>). Converting a 360 jpg into tiles helps the browser render the 360 at maximum resolution without any lag time. (More on tiles below).</p>
</li>
</ul>
<p>Here is <code>app.R</code>:</p>
<pre style="background-color: #f5f5f5; border: 1px solid #ccc; padding: 3px;">library(shiny)

## Read in a csv file which contains the JPG file names, image titles, etc.
imgs_df &lt;- read.csv("images.csv", stringsAsFactors = FALSE)

## Error checks
if (anyDuplicated(imgs_df$title_short)) stop("The 'title_short' column must contain unique values")
if (FALSE %in% file.exists(file.path("www", imgs_df$fn))) stop("Missing file(s)")

## Define the UI
ui &lt;- fluidPage(
  titlePanel("Drone 360 Photo Viewer"),
  
  sidebarLayout(
    sidebarPanel(
      selectInput("img_title_short", "Image", choices = imgs_df$title_short, selected = NULL),
      br(),
      p("Options for JPGs"),
      checkboxInput("autoload", "Auto Load", value = TRUE),
      numericInput("autorotate", "Autorotate", -2),
      numericInput("pitch", "Pitch", -10),
      width = 2
    ),
    
    mainPanel(
      uiOutput("pano_iframe")
    )
  )
)

server &lt;- function(input, output) {
  ## Render the iFrame 
  output$pano_iframe &lt;- renderUI({

    ## Get the row number of the selected image
    idx &lt;- which(imgs_df$title_short == input$img_title_short)
    
    if (grepl(".json$", imgs_df$fn[idx], ignore.case = TRUE)) {
      
      ## This is a JSON file, so no need to append anything else to the URL
      src_url &lt;- paste0("pannellum.htm?config=", imgs_df$fn[idx])

    } else {
      
      ## Construct the URL parts
      title_param &lt;- ifelse(is.na(imgs_df$title_long[idx]), "", 
                            paste0("&amp;title=", imgs_df$title_long[idx]))
      
      author_param &lt;- ifelse(is.na(imgs_df$author[idx]), "", 
                            paste0("&amp;author=", imgs_df$author[idx]))
      
      autorotate_param &lt;- paste0("&amp;autoRotate=", input$autorotate)
      
      autoload_param &lt;- ifelse(input$autoload, "&amp;autoLoad=true", "&amp;autoLoad=false")
      
      pitch_param &lt;- paste0("&amp;pitch=", input$pitch)
      
      src_url &lt;- paste0("pannellum.htm#panorama=", imgs_df$fn[idx], 
                        title_param, author_param, 
                        pitch_param, autorotate_param, autoload_param)
      
    }
    
    ## Return an iFrame tag which will become the new content of pano_iframe
    tags$iframe(src = URLencode(src_url), width = "1200px", height = "600px")
  })

}

# Run the application 
shinyApp(ui = ui, server = server)
</pre>
<p>The app.R for the Aerial 360 Viewer is similar to the basic viewer, however instead of reading the JPG files with <code>list.files()</code> they’re read in from a csv file which has additional columns. These additional columns become parameters in the iframe source URL. In addition, some of the display parameter in the URL are programaticly linked to form controls in the UI.</p>
<h2>Tiled 360 Images</h2>
<p>High resolution 360 images can be quite large (&gt; 100 MB is not uncommon). This can increase the amount of time it takes for the image to load, because rendering is done on the client thus can not start until the entire image is downloaded. Large images can also cause lags and staggering in the browser.</p>
<p>To cope with this, Pannellum supports multi-resolution image tiles. Tiles are a tried-and-true technique for handling large raster files. You can convert a large 360 JPG into a folder of tiles using Python and Hugin (<a href="https://pannellum.org/documentation/examples/multiresolution/" target="_blank" rel="noopener">details</a>), but the benefit is only really noticeable with large JPGs (i.e., greater than 10000 x 5000 pixels).</p>
<p>To display a tiled image with Pannellum, you need to also create a json file [<a href="https://github.com/UCANR-IGIS/360viewer/blob/master/aerial360s/www/elkus/elkus.json" target="_blank" rel="noopener">example</a>] that has all the parameters for displaying the image. This includes the parameters we previously passed in the URL, such as the title, author, auto rotate speed, etc. But it also include additional parameters related specifically to tiles, such as the path, tile resolution, max level, etc. JSON files also allow you to create clickable hotspots and all kinds of other cool stuff. For details on creating json files, see the <a href="https://pannellum.org/documentation/reference/#json-configuration-file-options" target="_blank" rel="noopener">Pannellum documentation</a>. You can also create JSON files to display regular 360 jpgs (<a href="https://github.com/ucanr-igis/360viewer/blob/master/aerial360s/www/krec.json" target="_blank" rel="noopener">example</a>).</p>
<p>To display a tiled 360 image, all you have to do is pass the json file as the <code>config</code> parameter in the URL, like this:</p>
<pre><code>pannellum.htm?config=elkus/elkus.json </code></pre>
<p>Note in this case we include a subdirectory with <code>elkus.json</code>, because it lives in a subdirectory of <tt>www</tt>.</p>
<h2>Conclusion</h2>
<p>Shiny + Pannellum is a powerful combo for displaying 360 photos. If you have folders and folders of 360 photos that haven’t seen the light of day since you took them, create a Shiny app to preview them locally then upload the best-of-the-best to a deployed Shiny app to share with friends and family.</p>
<p>The post <a rel="nofollow" href="https://andylyons.org/shiny-360-photo-viewer">Create a 360 Photo Viewer with Shiny and Pannellum</a> appeared first on <a rel="nofollow" href="https://andylyons.org">Andy Lyons</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://andylyons.org/shiny-360-photo-viewer/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
